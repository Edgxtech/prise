# oneshot - run until synced and stop
# livesync - run continuously
run.mode=livesync

# Time [seconds] between latest price updates in 'normal' run mode
latest.prices.livesync.update.interval.seconds=15

make.historical.data=true

start.metrics.server=true
metrics.server.port=9108

app.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
app.datasource.url=jdbc:mysql://localhost:3306/prise
app.datasource.username=username
app.datasource.password=12345

# TOKEN REGISTRY SERVICE MODULE
# tokenRegistry - tokens.cardano.org official registry
#                 this is the only complete working option currently
token.metadata.service.module=tokenRegistry

# CHAIN DATABASE SERVICE MODULE
# blockfrost - must have blockfrost.datasource properties
# carpJDBC - must have corresponding carp.datasource properties,
#            this is the only complete working option currently
# yacistore (wip) - must have yacistore.datasource & blockfrost.datasource (temporary limitation) properties
# carpHTTP (wip) - must have carp.datasource properties
# koios (wip) - must have koios.datasource & blockfrost.datasource (temporary limitation) properties
chain.database.service.module=blockfrost

### OPTION CARP-JDBC
#carp.datasource.driver-class-name=org.postgresql.Driver
#carp.datasource.url=jdbc:postgresql://localhost:5432/carp_mainnet?currentSchema=public
#carp.datasource.username=carp
#carp.datasource.password=12345

### OPTION KOIOS (WIP)
#koios.datasource.url=https://api.koios.rest/api/v1
#koios.datasource.apikey=

### OPTION CARP HTTP (WIP)
#chain.database.service=carp_http
#carp.datasource.url=https://mycarpnode.net:12345

### OPTION BLOCKFROST
blockfrost.datasource.url=https://cardano-mainnet.blockfrost.io/api/v0
blockfrost.datasource.apikey=

### OPTION Yaci Store
#yacistore.datasource.url=

# Cardano-node url
# Recommend changing to a self-hosted dedicated node
cnode.address=relays-new.cardano-mainnet.iohk.io
cnode.port=3001

# DEX used to compute on-chain swaps
# Comma separated list of DexClassifierEnum names
# E.g: Wingrider,Sundaeswap,Minswap
dex.classifiers=Minswap,Sundaeswap,Wingriders,MinswapV2

# Time [seconds since unix epoch] to begin the chain sync
start.point.time=